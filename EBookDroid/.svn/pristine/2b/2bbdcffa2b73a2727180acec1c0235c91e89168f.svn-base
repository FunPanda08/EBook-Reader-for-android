diff -Naur -x .svn -x generated mupdf.orig/fitz/base_error.c mupdf/fitz/base_error.c
--- mupdf.orig/fitz/base_error.c	2012-01-19 18:26:15.000000000 +0200
+++ mupdf/fitz/base_error.c	2012-01-20 19:46:29.000000000 +0200
@@ -1,5 +1,12 @@
 #include "fitz.h"
 
+#ifdef __ANDROID__
+#define EXIT(code) do {} while(0)
+#else
+#define EXIT(code) exit(code)
+#endif
+
+
 /* Warning context */
 
 void fz_var_imp(void *var)
@@ -11,7 +18,6 @@
 {
 	if (ctx->warn->count > 1)
 	{
-		fprintf(stderr, "warning: ... repeated %d times ...\n", ctx->warn->count);
 		LOGE("warning: ... repeated %d times ...\n", ctx->warn->count);
 	}
 	ctx->warn->message[0] = 0;
@@ -34,7 +40,6 @@
 	else
 	{
 		fz_flush_warnings(ctx);
-		fprintf(stderr, "warning: %s\n", buf);
 		LOGE("warning: %s\n", buf);
 		fz_strlcpy(ctx->warn->message, buf, sizeof ctx->warn->message);
 		ctx->warn->count = 1;
@@ -48,9 +53,8 @@
 	if (ex->top >= 0) {
 		longjmp(ex->stack[ex->top].buffer, 1);
 	} else {
-		fprintf(stderr, "uncaught exception: %s\n", ex->message);
 		LOGE("uncaught exception: %s\n", ex->message);
-		exit(EXIT_FAILURE);
+		EXIT(EXIT_FAILURE);
 	}
 }
 
@@ -59,8 +63,8 @@
 	assert(ex);
 	if (ex->top + 1 >= nelem(ex->stack))
 	{
-		fprintf(stderr, "exception stack overflow!\n");
-		exit(EXIT_FAILURE);
+    		LOGE("exception stack overflow: %d!\n", ex->top);
+		EXIT(EXIT_FAILURE);
 	}
 	ex->top++;
 }
@@ -80,7 +84,6 @@
 	va_end(args);
 
 	fz_flush_warnings(ctx);
-	fprintf(stderr, "error: %s\n", ctx->error->message);
 	LOGE("error: %s\n", ctx->error->message);
 
 	throw(ctx->error);
diff -Naur -x .svn -x generated mupdf.orig/fitz/base_memory.c mupdf/fitz/base_memory.c
--- mupdf.orig/fitz/base_memory.c	2012-01-20 19:39:16.000000000 +0200
+++ mupdf/fitz/base_memory.c	2012-01-20 19:42:38.000000000 +0200
@@ -224,6 +224,8 @@
 	NULL,
 	fz_malloc_default,
 	fz_realloc_default,
-	fz_free_default
+	fz_free_default,
+	NULL,
+	NULL
 };
 
diff -Naur -x .svn -x generated mupdf.orig/fitz/fitz.h mupdf/fitz/fitz.h
--- mupdf.orig/fitz/fitz.h	2012-02-01 12:52:31.000000000 +0200
+++ mupdf/fitz/fitz.h	2012-02-01 14:20:45.000000000 +0200
@@ -28,8 +28,8 @@
 #define LOGI(...) __android_log_print(ANDROID_LOG_INFO,LOG_TAG,__VA_ARGS__)
 #define LOGE(...) __android_log_print(ANDROID_LOG_ERROR,LOG_TAG,__VA_ARGS__)
 #else
-#define LOGI(...) do {} while(0)
-#define LOGE(...) do {} while(0)
+#define LOGI(...) fprintf(stderr,__VA_ARGS__)
+#define LOGE(...) fprintf(stderr,__VA_ARGS__)
 #endif
 
 #define nelem(x) (sizeof(x)/sizeof((x)[0]))
diff -Naur -x .svn -x generated mupdf.orig/fitz/res_colorspace.c mupdf/fitz/res_colorspace.c
--- mupdf.orig/fitz/res_colorspace.c	2012-01-19 20:00:30.000000000 +0200
+++ mupdf/fitz/res_colorspace.c	2012-01-20 16:25:27.000000000 +0200
@@ -1,6 +1,6 @@
 #include "fitz.h"
 
-#define SLOWCMYK
+//#define SLOWCMYK
 
 void
 fz_free_colorspace_imp(fz_context *ctx, fz_storable *cs_)
diff -Naur -x .svn -x generated mupdf.orig/xps/xps_zip.c mupdf/xps/xps_zip.c
--- mupdf.orig/xps/xps_zip.c	2012-02-01 12:52:32.000000000 +0200
+++ mupdf/xps/xps_zip.c	2012-02-01 15:02:18.000000000 +0200
@@ -41,6 +41,19 @@
 	return a | b << 8 | c << 16 | d << 24;
 }
 
+/* SumatraPDF: support ZIP64 extension */
+
+#define ZIP64_END_OF_CENTRAL_DIRECTORY_LOCATOR_SIG 0x07064b50
+#define ZIP64_END_OF_CENTRAL_DIRECTORY_SIG 0x06064b50
+#define ZIP64_EXTRA_FIELD_SIG 0x0001
+
+static inline int getlong64(fz_stream *file)
+{
+	int a = getlong(file);
+	int b = getlong(file);
+	return b != 0 ? -1 : a;
+}
+
 static void *
 xps_zip_alloc_items(xps_document *doc, int items, int size)
 {
@@ -130,16 +143,26 @@
 
 		code = inflateInit2(&stream, -15);
 		if (code != Z_OK)
+		{
+			/* SumatraPDF: fix memory leak */
+			fz_free(doc->ctx, inbuf);
 			fz_throw(doc->ctx, "zlib inflateInit2 error: %s", stream.msg);
+		}
 		code = inflate(&stream, Z_FINISH);
 		if (code != Z_STREAM_END)
 		{
 			inflateEnd(&stream);
+			/* SumatraPDF: fix memory leak */
+			fz_free(doc->ctx, inbuf);
 			fz_throw(doc->ctx, "zlib inflate error: %s", stream.msg);
 		}
 		code = inflateEnd(&stream);
 		if (code != Z_OK)
+		{
+			/* SumatraPDF: fix memory leak */
+			fz_free(doc->ctx, inbuf);
 			fz_throw(doc->ctx, "zlib inflateEnd error: %s", stream.msg);
+		}
 
 		fz_free(doc->ctx, inbuf);
 	}
@@ -174,8 +197,45 @@
 	(void) getlong(doc->file); /* size of central directory */
 	offset = getlong(doc->file); /* offset to central directory */
 
-	doc->zip_count = count;
+	/* SumatraPDF: support ZIP64 extension */
+	if (count == 0xFFFF)
+	{
+		fz_seek(doc->file, start_offset - 20, 0);
+
+		sig = getlong(doc->file);
+		if (sig != ZIP64_END_OF_CENTRAL_DIRECTORY_LOCATOR_SIG)
+			fz_throw(doc->ctx, "wrong zip64 end of central directory locator signature (0x%x)", sig);
+
+		(void) getlong(doc->file); /* start disk */
+		offset = getlong64(doc->file); /* offset to end of central directory record */
+		if (offset < 0)
+			fz_throw(doc->ctx, "zip64 files larger than 2 GB aren't supported");
+
+		fz_seek(doc->file, offset, 0);
+
+		sig = getlong(doc->file);
+		if (sig != ZIP64_END_OF_CENTRAL_DIRECTORY_SIG)
+			fz_throw(doc->ctx, "wrong zip64 end of central directory signature (0x%x)", sig);
+
+		(void) getlong64(doc->file); /* size of record */
+		(void) getshort(doc->file); /* version made by */
+		(void) getshort(doc->file); /* version to extract */
+		(void) getlong(doc->file); /* disk number */
+		(void) getlong(doc->file); /* disk number start */
+		count = getlong64(doc->file); /* entries in central directory disk */
+		(void) getlong64(doc->file); /* entries in central directory */
+		(void) getlong64(doc->file); /* size of central directory */
+		offset = getlong64(doc->file); /* offset to central directory */
+
+		if (count < 0 || offset < 0)
+			fz_throw(doc->ctx, "zip64 files larger than 2 GB aren't supported");
+	}
+
 	doc->zip_table = fz_malloc_array(doc->ctx, count, sizeof(xps_entry));
+	/* SumatraPDF: don't crash in xps_free_context in case the above
+	   malloc fails or an exception is thrown in the loop below */
+	memset(doc->zip_table, 0, count * sizeof(xps_entry));
+	doc->zip_count = count;
 
 	fz_seek(doc->file, offset, 0);
 
@@ -206,7 +266,24 @@
 		fz_read(doc->file, (unsigned char*)doc->zip_table[i].name, namesize);
 		doc->zip_table[i].name[namesize] = 0;
 
-		fz_seek(doc->file, metasize, 1);
+		/* SumatraPDF: support ZIP64 extension */
+		while (metasize > 0)
+		{
+			int type = getshort(doc->file);
+			int size = getshort(doc->file);
+			if (type == ZIP64_EXTRA_FIELD_SIG)
+			{
+				doc->zip_table[i].usize = getlong64(doc->file);
+				doc->zip_table[i].csize = getlong64(doc->file);
+				doc->zip_table[i].offset = getlong64(doc->file);
+				fz_seek(doc->file, -24, 1);
+			}
+			fz_seek(doc->file, size, 1);
+			metasize -= 4 + size;
+		}
+		if (doc->zip_table[i].usize < 0 || doc->zip_table[i].csize < 0 || doc->zip_table[i].offset < 0)
+			fz_throw(doc->ctx, "zip64 files larger than 2 GB aren't supported");
+
 		fz_seek(doc->file, commentsize, 1);
 	}
 
@@ -267,7 +344,16 @@
 	if (ent)
 	{
 		part = xps_new_part(doc, partname, ent->usize);
+		/* SumatraPDF: fix memory leak */
+		fz_try(doc->ctx)
+		{
 		xps_read_zip_entry(doc, ent, part->data);
+		}
+		fz_catch(doc->ctx)
+		{
+			xps_free_part(doc, part);
+			fz_rethrow(doc->ctx);
+		}
 		return part;
 	}
 
@@ -304,7 +390,16 @@
 			else
 				sprintf(buf, "%s/[%d].last.piece", name, i);
 			ent = xps_find_zip_entry(doc, buf);
+			/* SumatraPDF: fix memory leak */
+			fz_try(doc->ctx)
+			{
 			xps_read_zip_entry(doc, ent, part->data + offset);
+			}
+			fz_catch(doc->ctx)
+			{
+				xps_free_part(doc, part);
+				fz_rethrow(doc->ctx);
+			}
 			offset += ent->usize;
 		}
 		return part;
@@ -341,6 +436,7 @@
 	xps_part *part;
 	FILE *file;
 	int count, size, offset, i, n;
+	int seen_last = 0;
 
 	fz_strlcpy(buf, doc->directory, sizeof buf);
 	fz_strlcat(buf, name, sizeof buf);
@@ -361,7 +457,7 @@
 	/* Count the number of pieces and their total size */
 	count = 0;
 	size = 0;
-	while (1)
+	while (!seen_last)
 	{
 		sprintf(buf, "%s%s/[%d].piece", doc->directory, name, count);
 		file = fopen(buf, "rb");
@@ -369,6 +465,7 @@
 		{
 			sprintf(buf, "%s%s/[%d].last.piece", doc->directory, name, count);
 			file = fopen(buf, "rb");
+			seen_last = (file != NULL);
 		}
 		if (!file)
 			break;
@@ -377,6 +474,9 @@
 		size += ftell(file);
 		fclose(file);
 	}
+	/* SumatraPDF: consistent piece counting */
+	if (!seen_last)
+		fz_throw(doc->ctx, "cannot find all pieces for part '%s'", name);
 
 	/* Inflate the pieces */
 	if (count)
@@ -391,7 +491,11 @@
 				sprintf(buf, "%s%s/[%d].last.piece", doc->directory, name, i);
 			file = fopen(buf, "rb");
 			if (!file)
+			{
+				/* SumatraPDF: fix memory leak */
+				xps_free_part(doc, part);
 				fz_throw(doc->ctx, "cannot open file '%s'", buf);
+			}
 			n = fread(part->data + offset, 1, size - offset, file);
 			offset += n;
 			fclose(file);
